# -*- coding: utf-8 -*-
"""lstm diss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lFaVVmMN9ZYRqNlh5Tk0wtNBtuUBz-B9
"""

import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import math, time
import itertools
from sklearn.metrics import mean_squared_error
from operator import itemgetter
from torch.autograd import Variable
#matplotlib inline

import io
from google.colab import files
data = pd.DataFrame()
uploaded = files.upload()
data = pd.read_csv(io.BytesIO(uploaded['QQQ_wointoil.csv']))
data["Close"].plot()
data.head()
data.dropna(inplace=True)

data['Date'] = pd.to_datetime(data['Date'])
data.head()

print(data.dtypes)

data_to_train = data[:800]
data_to_test = data[800:]

data_to_train.to_csv('train_data.csv')
data_to_test.to_csv('test_data.csv')

print(len(data.index))

#training_set = data_to_train.iloc[: , 4:5].values
#real_stock_price = data_to_test.iloc[: , 4:5].values
train_data = pd.read_csv('train_data.csv')
test_data = pd.read_csv('test_data.csv')


training_set = train_data.iloc[: , 4:5].values
real_stock_price = test_data.iloc[: , 4:5].values

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0, 1))
training_data_scaled = sc.fit_transform(training_set)
training_data_scaled.shape

X_train = []
y_train = []
for i in range(60, 800):
    X_train.append(training_data_scaled[i-60:i, 0])
    y_train.append(training_data_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.LSTM(units=50, return_sequences=True,
input_shape=(X_train.shape[1], 1)))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.LSTM(units=50, return_sequences=True))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.LSTM(units=50, return_sequences=True))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.LSTM(units=50))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Dense(units=1))
model.summary()
model.compile(optimizer="Adam", loss="mse", metrics=["mae", "mape"])

modelo = model.fit(X_train, y_train, epochs=22, batch_size=32)

dataset_total = data['Close']
inputs = dataset_total[len(dataset_total)- len(test_data) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 259):
   X_test.append(inputs[i- 60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

plt.figure(figsize=(12, 6))

plt.plot(real_stock_price, color='black', label='QQQ Stock Price')
plt.plot(predicted_stock_price, color='red', label='Predicted QQQ Stock Price')

plt.title('QQQ Stock Price Prediction')
plt.xlabel('Time')
plt.xlabel('QQQ')
plt.legend()
plt.show()

from google.colab import drive
drive.mount('/content/drive')